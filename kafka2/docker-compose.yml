version: '2.2'
services:
#  es01:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
#    container_name: es01
#    environment:
#      - node.name=es01
#      - cluster.name=es-docker-cluster
#      - discovery.type=single-node
##      - discovery.seed_hosts=es02,es03
##      - cluster.initial_master_nodes=es01
##      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - data01:/usr/share/elasticsearch/data
#    ports:
#      - 9200:9200
#    networks:
#      - elastic
#
#
#  ls01:
#    image: docker.elastic.co/logstash/logstash:7.12.1
#    container_name: ls01
##    environment:
##      ELASTIC_HOST: localhost:9200
#    volumes:
#      - ./pipeline:/usr/share/logstash/pipeline/
#      - ./config:/usr/share/logstash/config/
#    ports:
#      - 5046:5046
#    networks:
#      - elastic
#

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    #NOT SURE IF THE BELOW WORKS, SEEMS LIKE IT CREATES ITS OWN NETWORK
#    networks:
#      - elastic

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 192.168.1.124
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Topic1 will have 1 partition, 1 replica and a cleanup.policy set to compact
      KAFKA_CREATE_TOPICS: "quickstart-events-topic:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    #NOT SURE IF THE BELOW WORKS, SEEMS LIKE IT CREATES ITS OWN NETWORK
#    networks:
#      - elastic
#
#volumes:
#  data01:
#    driver: local



#networks:
#  elastic:
#    driver: bridge